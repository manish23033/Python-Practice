#!/usr/bin/env python3
"""
Tic-Tac-Toe playable in terminal.
Options: 1) Two players  2) Play vs Computer (unbeatable minimax)
"""

from typing import List, Optional, Tuple
import math
import random

EMPTY = " "
PLAYER_X = "X"
PLAYER_O = "O"


class TicTacToe:
    def __init__(self):
        # board indexed 0..8 (rows left-to-right, top-to-bottom)
        self.board: List[str] = [EMPTY] * 9
        self.current_winner: Optional[str] = None  # "X" or "O"

    def print_board(self):
        # show the board in a human friendly way
        for row in range(3):
            print(" " + " | ".join(self.board[row * 3:(row + 1) * 3]))
            if row < 2:
                print("---+---+---")

    @staticmethod
    def print_board_nums():
        # show the numbers 0..8 corresponding to board positions
        nums = [str(i) for i in range(9)]
        for row in range(3):
            print(" " + " | ".join(nums[row * 3:(row + 1) * 3]))
            if row < 2:
                print("---+---+---")

    def available_moves(self) -> List[int]:
        return [i for i, spot in enumerate(self.board) if spot == EMPTY]

    def empty_squares(self) -> bool:
        return EMPTY in self.board

    def num_empty_squares(self) -> int:
        return self.board.count(EMPTY)

    def make_move(self, square: int, letter: str) -> bool:
        # if valid move, make the move (assign letter to square) and return True
        if self.board[square] == EMPTY:
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square: int, letter: str) -> bool:
        # check the row, column, and diagonals for a win
        row_ind = square // 3
        row = self.board[row_ind * 3:(row_ind + 1) * 3]
        if all(s == letter for s in row):
            return True

        col_ind = square % 3
        column = [self.board[col_ind + i * 3] for i in range(3)]
        if all(s == letter for s in column):
            return True

        # check diagonals
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]
            if all(s == letter for s in diagonal1):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            if all(s == letter for s in diagonal2):
                return True

        return False


def minimax(state: TicTacToe, player: str) -> dict:
    """
    Minimax algorithm that returns a dict:
    {'position': int, 'score': int}
    Score is +1 for X win, -1 for O win, 0 for draw, from X's perspective.
    We treat 'X' as maximizing player.
    """
    max_player = PLAYER_X
    other_player = PLAYER_O if player == PLAYER_X else PLAYER_X

    # base cases
    if state.current_winner == other_player:
        # previous move by other_player won
        return {"position": None, "score": 1 * (state.num_empty_squares() + 1) if other_player == max_player else -1 * (state.num_empty_squares() + 1)}
    elif not state.empty_squares():  # draw
        return {"position": None, "score": 0}

    # initialize
    if player == max_player:
        best = {"position": None, "score": -math.inf}
    else:
        best = {"position": None, "score": math.inf}

    for possible_move in state.available_moves():
        # try the move
        state.make_move(possible_move, player)
        sim_score = minimax(state, other_player)  # simulate a game after making that move

        # undo move
        state.board[possible_move] = EMPTY
        state.current_winner = None

        sim_score["position"] = possible_move

        # update the best
        if player == max_player:
            if sim_score["score"] > best["score"]:
                best = sim_score
        else:
            if sim_score["score"] < best["score"]:
                best = sim_score

    return best


def play(game: TicTacToe, x_player_type: str = "human", o_player_type: str = "human"):
    """
    x_player_type / o_player_type can be:
      - "human"
      - "computer"  (uses minimax and is unbeatable)
    X always goes first.
    """
    letter = PLAYER_X  # starting letter
    while game.empty_squares():
        print("\nCurrent board:")
        game.print_board()
        print()
        if letter == PLAYER_X:
            player_type = x_player_type
        else:
            player_type = o_player_type

        if player_type == "human":
            valid_square = False
            val = None
            while not valid_square:
                try:
                    square = int(input(f"{letter}'s turn. Input move (0-8): "))
                    if square not in game.available_moves():
                        raise ValueError
                    valid_square = True
                    val = square
                except ValueError:
                    print("Invalid move. Try again.")
            game.make_move(val, letter)
        else:  # computer's turn
            print(f"{letter} (computer) is thinking...")
            if len(game.available_moves()) == 9:
                # choose a random corner or center first for variety
                val = random.choice([0, 2, 4, 6, 8])
            else:
                move = minimax(game, letter)
                val = move["position"]
            game.make_move(val, letter)
            print(f"{letter} (computer) moves to square {val}.")

        if game.current_winner:
            print()
            game.print_board()
            print(f"\n{letter} wins!")
            return
        # alternate letters
        letter = PLAYER_O if letter == PLAYER_X else PLAYER_X

    # draw
    print()
    game.print_board()
    print("\nIt's a tie!")


def main():
    print("Welcome to Tic-Tac-Toe!")
    TicTacToe.print_board_nums()
    print("\nChoose mode:")
    print("1. Two players (human vs human)")
    print("2. Play vs computer (you can choose X or O)")
    mode = input("Enter 1 or 2 (default 1): ").strip() or "1"

    if mode == "2":
        who = input("Do you want to play as X (goes first) or O? [X/O] (default X): ").strip().upper() or "X"
        if who not in ("X", "O"):
            who = "X"
        if who == "X":
            x_type, o_type = "human", "computer"
        else:
            x_type
